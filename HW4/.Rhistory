confusionMatrix(svm_fit2, test$target)
glm_fit_tl <- glm(target~num_child + income + home_value + months_since_donate + time_lag, data = train, family ="binomial")
glm_prob_tl <- predict(glm_fit_tl, type = "response")
glm_pred_tl <- rep("Donor", 2401)
glm_pred_tl[glm_prob_tl > 0.5] = "No Donor"
table(glm_pred_tl, train$target)
mean(glm_pred_tl==train$target)
# Write to CSV
future_value <- predict(glm_fit_tl, future)
Value <- c("value", as.character(future_value))
Value <- if_else (Value > 0.5, "No Donor", "Donor")
write.table(Value,file="final_glm.csv", col.names = c("value"), sep = ",", row.names=F)
glm_fit_tl <- glm(target~num_child + income + home_value + months_since_donate + time_lag, data = train, family ="binomial")
glm_prob_tl <- predict(glm_fit_tl, type = "response")
glm_pred_tl <- rep("Donor", 2401)
glm_pred_tl[glm_prob_tl > 0.5] = "No Donor"
table(glm_pred_tl, train$target)
mean(glm_pred_tl==train$target)
# Write to CSV
future_value <- predict(glm_fit_tl, future)
Value <- c("value", as.character(future_value))
Value <- if_else (Value > 0.5, "No Donor", "Donor")
write.table(Value,file="~/Data_Mining/Modeling_Competition/final_glm.csv", col.names = c("value"), sep = ",", row.names=F)
glm_fit_tl <- glm(target~num_child + income + home_value + months_since_donate + time_lag, data = train, family ="binomial")
glm_prob_tl <- predict(glm_fit_tl, type = "response")
glm_pred_tl <- rep("Donor", 2401)
glm_pred_tl[glm_prob_tl > 0.5] = "No Donor"
table(glm_pred_tl, train$target)
mean(glm_pred_tl==train$target)
# Write to CSV
future_value <- predict(glm_fit_tl, future)
Value <- c("value", as.character(future_value))
Value <- if_else (Value > 0.5, "No Donor", "Donor")
set.seed(12345)
svm_fit2 <- train(target~num_child + income + home_value + months_since_donate, data = train, method = "svmLinear", trControl = train_control, preProcess = c("center", "scale"))
future_value_svm <- predict(svm_fit2, future)
Value_svm <- c("value", as.character(future_value_svm))
write.table(Value_svm,file="final_svm.csv", col.names = c("value"), sep = ",", row.names=F)
write.csv(Value_svm,file="final_svm.csv", col.names = c("value"), sep = ",", row.names=F)
write.csv(Value_svm,file="~/final_svm.csv", col.names = c("value"), sep = ",", row.names=F)
write.csv(Value_svm,file="~/final_svm.csv", row.names=F)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(tidyverse)
library(caret)
library(usdm)
library(modelr)
library(PerformanceAnalytics)
glm_fit_tl <- glm(target~num_child + income + home_value + months_since_donate + time_lag, data = train, family ="binomial")
glm_prob_tl <- predict(glm_fit_tl, type = "response")
glm_pred_tl <- rep("Donor", 2401)
glm_pred_tl[glm_prob_tl > 0.5] = "No Donor"
table(glm_pred_tl, train$target)
mean(glm_pred_tl==train$target)
# Write to CSV
future_value <- predict(glm_fit_tl, future)
Value <- c("value", as.character(future_value))
Value <- if_else (Value > 0.5, "No Donor", "Donor")
write.csv(Value,file="~/final_glm.csv", row.names=F)
View(future_value_qda)
knitr::opts_chunk$set(echo = TRUE)
k <- 15
p <- as.numeric(k)
for (i in 1:k) {
q <- 1-(0:i-1))/365 #1 - prob(no match)
k <- 15
p <- as.numeric(k)
for (i in 1:k) {
q <- 1-(0:(i-1))/365 #1 - prob(no match)
p[i] <- 1-prod(q)
}
prob <- p[k]
prob
k <- 23
p <- as.numeric(k)
for (i in 1:k) {
q <- 1-(0:(i-1))/365 #1 - prob(no match)
p[i] <- 1-prod(q)
}
prob <- p[k]
prob
?crossing
library(tidyverse)
?crossing
?pbirthday(10)
pbirthday(10)
pbirthday(100)
rpois(20, 365)
choose(20,3)
rpois(1140, 365)
choose(3,20)
set.seed(1)
choose(20,3)
dist1 <- rpois(1140, 365)
duplicated(dist1)
dist1
choose(30,3)
dist1 <- rpois(4060, 365)
dist1
pbirthday(20, classes = 365, coincident = 3)
pbirthday(50, classes = 365, coincident = 3)
k <- 250
for (i in seq(from = 1, to =k, by 50) {
k <- 250
for (i in seq(from = 1, to = 250, by 50) {
k <- 250
for (i in seq(from = 1, to = k, by=50) {
k <- 250
for (i in seq(from = 1, to = k, by=50)) {
pbirthday(i, classes = 365, coincident = 3)
}
print(i)
for (i in seq(1,250,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
print(i)
for (i in seq(1,250,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
for (i in seq(1,250,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
print(i)
for (i in seq(0,250,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
print(pbirthday())
for (i in seq(0,250,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
print(pbirthday())
i
pbirthday(i, classes = 365, coincident = 3)
for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
pbirthday(i, classes = 365, coincident = 3)
pbirthday(k, classes = 365, coincident = 3)
k <- for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
pbirthday(k, classes = 365, coincident = 3)
k <- for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
k <- function{for (i in seq(0,300,50)) {
k <- function(for (i in seq(0,300,50)) {
k <- function(){
for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
pbirthday(k, classes = 365, coincident = 3)
k <- function(){
for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}}
pbirthday(k, classes = 365, coincident = 3)
for (i in seq(0,300,50)) {
}}
k <- function(){
for (i in seq(0,300,50)) }
k <- function(){
for (i in seq(0,300,50))
}
k <- function(){
for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}
pbirthday(i, classes = 365, coincident = 3)
k <- function(){
for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}}
pbirthday(i, classes = 365, coincident = 3)
View(k)
output <- vector("integer", 0)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
output
k <- function(){
for (i in seq(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}}
#pbirthday(i, classes = 365, coincident = 3)
k
k <- function(){
for (i in seq_along(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}}
#pbirthday(i, classes = 365, coincident = 3)
pbirthday(i, classes = 365, coincident = 3)
k <- function(){
for (i in seq_along(0,300,50)) {
pbirthday(i, classes = 365, coincident = 3)
}}
pbirthday(i, classes = 365, coincident = 3)
k <- function(){
for (i in seq_along(from = 0, to = 300, by = 50)) {
pbirthday(i, classes = 365, coincident = 3)
}}
pbirthday(i, classes = 365, coincident = 3)
k <- function(){
for (i in seq_along(from = 0, to = 300, by = 50)) {
pbirthday(i, classes = 365, coincident = 3)
}}
pbirthday(k, classes = 365, coincident = 3)
k <- function(){
for (i in seq_along(from = 0, to = 300, by = 50)) {
output[[i]] <- pbirthday(i, coincident = 3)
}}
k
pbirthday(k, classes = 365, coincident = 3)
pbirthday(i, classes = 365, coincident = 3)
k <- function(){
for (i in seq_along(from = 0, to = 300, by = 50)) {
k[[i]] <- pbirthday(i, coincident = 3)
}}
pbirthday(i, classes = 365, coincident = 3)
k <- vector("double", length(10))
for (i in seq_along(from = 0, to = 300, by = 50)) {
k[[i]] <- pbirthday(i, coincident = 3)
}
k <- vector("double", length(10))
for (i in seq_along(k)) {
k[[i]] <- pbirthday(i, coincident = 3)
}
pbirthday(i, classes = 365, coincident = 3)
k <- vector("double", length(10))
for (i in seq(from = 0, to = 300, by = 50)) {
k[[i]] <- pbirthday(i, coincident = 3)
}
k <- vector("double", length(10))
for (i in seq(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
pbirthday(i, classes = 365, coincident = 3)
pbirthday(k, classes = 365, coincident = 3)
k <- vector("double", length(10))
for (i in seq_along(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
?seq_along
k <- vector("double", length(10))
for (i in seq(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
pbirthday(k, classes = 365, coincident = 3)
k <- vector("double", length(10))
while (i in seq(from = 0, to = 300, by = 50)) {
k <- vector("double", length(10))
for (i in seq(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
pbirthday(k, classes = 365, coincident = 3)
k <-  for (i in seq(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
pbirthday(k, classes = 365, coincident = 3)
for (i in seq(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
pbirthday(k, classes = 365, coincident = 3)
for (i in seq(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
pbirthday(i, classes = 365, coincident = 3)
for (i in seq(from = 0, to = 300, by = 50)) {
pbirthday(i, coincident = 3)
}
for (i in seq(from = 0, to = 300, by = 50))
pbirthday(i, coincident = 3)
for (i in seq_along(from = 0, to = 300, by = 50))
for (i in seq_along(from = 0, to = 300, by = 50))
for (i in seq_along(from = 0, to = 300, by = 50)) {
}
for (i in seq(from = 0, to = 300, by = 50)) {
}
pbirthday(i, coincident = 3)
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
for (i in seq(from = 0, to = 300, by = 50)) {
paste(pbirthday(i, coincident = 3))
}
k <- for (i in seq(from = 0, to = 300, by = 50)) {
paste(pbirthday(i, coincident = 3))
}
k
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
pbirthday(i, coincident = 3)
for (i in seq(from = 0, to = 300, by = 50)) {
k <- print(paste(pbirthday(i, coincident = 3)))
}
K
for (i in seq(from = 0, to = 300, by = 50)) {
k <- print(paste(pbirthday(i, coincident = 3)))
}
k
for (i in seq(from = 0, to = 300, by = 50)) {
print("For" paste(i) "people, there is "paste(pbirthday(i, coincident = 3))"chance of any 3 birthdays being shared")
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(i)" has a "paste(pbirthday(i, coincident = 3))"chance of any 3 birthdays being shared")
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(i) " has a "paste(pbirthday(i, coincident = 3)) "chance of any 3 birthdays being shared")
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste0(i) " has a "paste(pbirthday(i, coincident = 3)) "chance of any 3 birthdays being shared")
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste0(i) " has a" paste(pbirthday(i, coincident = 3)) "chance of any 3 birthdays being shared")
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste0(i) "has a" paste(pbirthday(i, coincident = 3)) "chance of any 3 birthdays being shared")
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)) "chance of any 3 birthdays being shared")
for (i in seq(from = 0, to = 300, by = 50)) {
print("paste(pbirthday(i, coincident = 3)) chance of any 3 birthdays being shared")
}
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
k <- for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
table <- matrix(c(0, 50, 100, 150, 200, 250, 300))
View(table)
k <- for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300))
Percent=rep(k))
k <- for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(k))
k <- for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste(pbirthday(i, coincident = 3)))))
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste(pbirthday(i, coincident = 3)))))
k <- for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste(pbirthday(k, coincident = 3)))))
k <- as.numeric(for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
})
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste(pbirthday(k, coincident = 3)))))
k <- for (i in seq(from = 0, to = 300, by = 50)) {
print(paste(pbirthday(i, coincident = 3)))
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste(pbirthday(i, coincident = 3)))))
as.table(table)
head(table)
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste0(pbirthday(i, coincident = 3)),sep = "")))
head(table)
print(paste0(pbirthday(i, coincident = 3)), sep = "")
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste0(pbirthday(i, coincident = 3)), sep = "")
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste0(pbirthday(i, coincident = 3)),sep = "")))
head(table)
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste0(pbirthday(i, coincident = 3)), sep = "")
}
table <- data.frame(Number=rep(c(0, 50, 100, 150, 200, 250, 300)),
Percent=rep(print(paste0(pbirthday(i, coincident = 3)))))
head(table)
mat <- matrix(data = seq(0, 300, by=50), nrow = 7, ncol = 2)
for (r in 1:nrow(mat))
print(paste0(pbirthday(r, coincident = 3)))
mat
mat <- matrix(data = seq(0, 300, by=50), nrow = 7, ncol = 2)
for (r in 1:nrow(mat))
for(q in 1:ncol(mat))
print(paste0(pbirthday(q, coincident = 3)))
print(paste0(pbirthday(q, coincident = 3)))
print(paste0("Row", r, pbirthday(q, coincident = 3)))
View(mat)
View(mat)
mat <- matrix(data = seq(0, 300, by=50), nrow = 7, ncol = 2)
for (r in 1:nrow(mat))
for(q in 1:ncol(mat)) {
new <- rep(pbirthday(q, coincident = 3))
}
#for (i in seq(from = 0, to = 300, by = 50)) {
print(paste0(pbirthday(i, coincident = 3)), sep = "")
pbirthday(0, coincident = 3)
pbirthday(50, coincident = 3)
a <- pbirthday(0, coincident = 3)
b <- pbirthday(50, coincident = 3)
c <- pbirthday(100, coincident = 3)
d <- pbirthday(150, coincident = 3)
e <- pbirthday(200, coincident = 3)
f <- pbirthday(250, coincident = 3)
g <- pbirthday(300, coincident = 3)
tab <- matrix(c(0, 50, 100, 150, 200, 250, 300, a, b, c, d, e, f, g), ncol = 2, byrow = F)
tab
for (i in seq(from = 0, to = 300, by = 50)) {
print(paste0(pbirthday(i, coincident = 3)), sep = "")
}
print(i)
x <- seq(0, 300- by = 50)
x <- seq(0, 300, by = 50)
for (i in x)
print(paste0(pbirthday(i, coincident = 3)), sep = "")
print(i)
table <- data.frame(Number=x,
Percent=rep(print(paste0(pbirthday(i, coincident = 3)))))
View(table)
table <- data.frame(Number=x,
Percent=(print(paste0(pbirthday(i, coincident = 3)))))
table <- matrix(x, i, ncol = 2)
table <- matrix(x, print(paste0(pbirthday(i, coincident = 3)), sep = ""), ncol = 2)
v <- print(paste0(pbirthday(i, coincident = 3)), sep = "")
table <- matrix(x, v, ncol = 2)
x <- seq(0, 300, by = 50)
for (i in x)
print(paste0(pbirthday(i, coincident = 3)), sep = "")
v <- print(paste0(pbirthday(i, coincident = 3)), sep = "")
x <- seq(0, 300, by = 50)
for (i in x)
print(paste0(pbirthday(i, coincident = 3)), sep = "")
x <- seq(0, 300, by = 25)
for (i in x)
print(paste0(pbirthday(i, coincident = 3)), sep = "")
pbirthday(88, coincident = 3)
pbirthday(87, coincident = 3)
birthdays <- c(a,b,c,d,e,f,g)
birthdays
library(ggplot2)
?ggplot
df <- c(birthdays, prob)
birthdays <- c(0,50,100,150,200,250,300)
prob <- c(a,b,c,d,e,f,g,)
prob <- c(a,b,c,d,e,f,g)
df <- c(birthdays, prob)
birthdays <- c(0,50,100,150,200,250,300)
prob <- c(a,b,c,d,e,f,g)
df <- c(birthdays, prob)
ggplot(data = df, aes(x = prob, y = birthdays)
+ geom_line())
rlang::last_error()
ggplot(data = df, mapping = aes(x = prob, y = birthdays)
+ geom_line())
ggplot(data = df, +
geom_line(mapping = aes(x = birthdays, y = prob)))
ggplot(data = df) +
geom_line(mapping = aes(x = birthdays, y = prob)))
ggplot(data = df) +
geom_smooth(mapping = aes(x = birthdays, y = prob))
birthdays <- c(0,50,100,150,200,250,300)
prob <- c(a,b,c,d,e,f,g)
df <- data.frame(c(birthdays, prob))
ggplot(data = df) +
geom_smooth(mapping = aes(x = birthdays, y = prob))
View(df)
birthdays <- seq(0, 300, by = 50)
df <- data.frame(c(birthdays, prob))
df <- data.frame(birthdays, prob)
ggplot(data = df) +
geom_smooth(mapping = aes(x = birthdays, y = prob))
ggplot(data = df) +
geom_line(mapping = aes(x = birthdays, y = prob))
birthdays <- x
prob <- c(a,b,c,d,e,f,g)
df <- data.frame(birthdays, prob)
birthdays <- seq(0, 300, by = 50)
prob <- c(a,b,c,d,e,f,g)
df <- data.frame(birthdays, prob)
ggplot(data = df) +
geom_line(mapping = aes(x = birthdays, y = prob))
?markov
install.packages(markovchain)
install.packages("markovchain")
knitr::opts_chunk$set(echo = TRUE)
library(markovchain)
?`markovchain-package`
install.packages(c("boot", "brio", "broom", "bslib", "cachem", "callr", "caret", "cli", "colorspace", "corrplot", "cpp11", "curl", "dbplyr", "desc", "DescTools", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "gert", "gh", "haven", "highr", "hms", "httpuv", "installr", "isoband", "jquerylib", "knitr", "Lahman", "later", "lubridate", "mvtnorm", "nycflights13", "openintro", "openssl", "packrat", "parallelly", "pillar", "pkgload", "processx", "proxy", "ps", "recipes", "remotes", "reprex", "rlang", "rmarkdown", "rsconnect", "rversions", "rvest", "sass", "sf", "shape", "stringi", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "units", "utf8", "vctrs", "viridis", "waldo", "withr", "xfun", "zip", "zoo"))
install.packages(c("boot", "brio", "broom", "bslib", "cachem", "callr", "caret", "cli", "colorspace", "corrplot", "cpp11", "curl", "dbplyr", "desc", "DescTools", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "gert", "gh", "haven", "highr", "hms", "httpuv", "installr", "isoband", "jquerylib", "knitr", "Lahman", "later", "lubridate", "mvtnorm", "nycflights13", "openintro", "openssl", "packrat", "parallelly", "pillar", "pkgload", "processx", "proxy", "ps", "recipes", "remotes", "reprex", "rlang", "rmarkdown", "rsconnect", "rversions", "rvest", "sass", "sf", "shape", "stringi", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "units", "utf8", "vctrs", "viridis", "waldo", "withr", "xfun", "zip", "zoo"))
install.packages(c("boot", "brio", "broom", "bslib", "cachem", "callr", "caret", "cli", "colorspace", "corrplot", "cpp11", "curl", "dbplyr", "desc", "DescTools", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "gert", "gh", "haven", "highr", "hms", "httpuv", "installr", "isoband", "jquerylib", "knitr", "Lahman", "later", "lubridate", "mvtnorm", "nycflights13", "openintro", "openssl", "packrat", "parallelly", "pillar", "pkgload", "processx", "proxy", "ps", "recipes", "remotes", "reprex", "rlang", "rmarkdown", "rsconnect", "rversions", "rvest", "sass", "sf", "shape", "stringi", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "units", "utf8", "vctrs", "viridis", "waldo", "withr", "xfun", "zip", "zoo"))
install.packages(c("boot", "brio", "broom", "bslib", "cachem", "callr", "caret", "cli", "colorspace", "corrplot", "cpp11", "curl", "dbplyr", "desc", "DescTools", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "gert", "gh", "haven", "highr", "hms", "httpuv", "installr", "isoband", "jquerylib", "knitr", "Lahman", "later", "lubridate", "mvtnorm", "nycflights13", "openintro", "openssl", "packrat", "parallelly", "pillar", "pkgload", "processx", "proxy", "ps", "recipes", "remotes", "reprex", "rlang", "rmarkdown", "rsconnect", "rversions", "rvest", "sass", "sf", "shape", "stringi", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "units", "utf8", "vctrs", "viridis", "waldo", "withr", "xfun", "zip", "zoo"))
install.packages(c("boot", "brio", "broom", "bslib", "cachem", "callr", "caret", "cli", "colorspace", "corrplot", "cpp11", "curl", "dbplyr", "desc", "DescTools", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "gert", "gh", "haven", "highr", "hms", "httpuv", "installr", "isoband", "jquerylib", "knitr", "Lahman", "later", "lubridate", "mvtnorm", "nycflights13", "openintro", "openssl", "packrat", "parallelly", "pillar", "pkgload", "processx", "proxy", "ps", "recipes", "remotes", "reprex", "rlang", "rmarkdown", "rsconnect", "rversions", "rvest", "sass", "sf", "shape", "stringi", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "units", "utf8", "vctrs", "viridis", "waldo", "withr", "xfun", "zip", "zoo"))
?poisson.test
v <- 1:3
names(v) <- c("a","b","c")
v[4] <- 4
knitr::opts_chunk$set(echo = TRUE)
v[4] <- 4
install.packages("NHPoisson")
?NHpoisson
?NHPoisson
?NHPOisson
???NHPoisson
??NHPoisson
knitr::opts_chunk$set(echo = TRUE)
library(NHPoisson)
?NHPoisson
install.packages(c("tidyverse", "MASS", "caret"))
setwd
setwd("C:/Users/apesi/Desktop/School/Summer 2021/Intro to Stochastic Processes/HW4")
